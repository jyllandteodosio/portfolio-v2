# Workflow name
name: Portfolio CI/CD

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main # Or the branch you use for production code

# Define the jobs to be executed
jobs:
  build-and-deploy:
    # Run on the latest Ubuntu environment
    runs-on: ubuntu-latest

    # Steps to be executed in this job
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx for building multi-platform images (recommended)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Build and push the Docker image to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root of the repository
          push: true # Push the image to the registry
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/portfolio-app:latest # Tag the image with your username and app name
          cache-from: type=gha # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max

      # Deploy to DigitalOcean Droplet via SSH
      - name: Deploy to Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Pull the latest Docker image (which now includes the updated Nginx config)
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/portfolio-app:latest

            # Stop and remove the old container if it's running
            docker stop portfolio-container || true
            docker rm portfolio-container || true

            # Run a new container from the latest image
            # -d: run in detached mode
            # -p 80:80: map droplet's port 80 to container's port 80
            # -p 443:443: map droplet's port 443 to container's port 443 (for HTTPS)
            # --name: give the container a name
            # -v: mount the SSL *archive* directory from the droplet into the container
            # Ensure the path /etc/letsencrypt/archive/jyllandteodosio.dev is correct on your droplet
            docker run -d \
              -p 80:80 \
              -p 443:443 \
              --name portfolio-container \
              -v /etc/letsencrypt/archive/jyllandteodosio.dev:/etc/nginx/ssl \
              ${{ secrets.DOCKER_HUB_USERNAME }}/portfolio-app:latest

            # Optional: Clean up old unused Docker images
            # docker image prune -f
